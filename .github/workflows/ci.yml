name: CI

on:
  push:
    branches:
      - main
      - feature/split-pipeline-deploy/pedro

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write

jobs:
  test:
    name: 'Test and Build'
    runs-on: ubuntu-latest
    env:
      DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
      JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}
      CLOUDFLARE_DEV_URL: ${{ secrets.CLOUDFLARE_DEV_URL }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      TOKEN_VALUE: ${{ secrets.TOKEN_VALUE }}
      CLOUDFLARE_BUCKET_NAME: ${{ secrets.CLOUDFLARE_BUCKET_NAME }}
      CLOUDFLARE_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
      CLOUDFLARE_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_SECURE: ${{ secrets.SMTP_SECURE }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASS: ${{ secrets.SMTP_PASS }}
      ENV_STAGE: ${{ secrets.ENV_STAGE }}

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5433:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: docker
          POSTGRES_DB: hub-postgres-db
        options: >-
          --health-cmd="pg_isready -U postgres -d hub-postgres-db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate tag
        id: generate_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo $SHA > sha.txt

      - name: Upload tag artifact
        uses: actions/upload-artifact@v3
        with:
          name: sha
          path: sha.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Install dependencies
        run: npm install
      
      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Unit tests
        run: npm run test

      - name: Clean up Docker containers
        run: docker-compose down -v || true

      - name: Build Docker images
        run: docker-compose build

      - name: Start Docker Compose services
        run: docker-compose up -d
        env:
          DATABASE_URL: postgresql://postgres:docker@localhost:5433/hub-postgres-db

      - name: Wait for Postgres to be ready
        run: |
          until docker-compose exec -T postgres pg_isready -U postgres -d hub-postgres-db; do
            echo "Waiting for postgres..."
            sleep 1
          done

      - name: Run Prisma migrations
        run: npx prisma migrate dev --name "apply-migrations"
        env:
          DATABASE_URL: postgresql://postgres:docker@localhost:5433/hub-postgres-db

      - name: Change permissions
        run: sudo chmod -R 777 ./data/pg

      - name: Run tests
        run: npm run test:e2e

  deploy:
    name: 'Deploy to AWS'
    runs-on: ['self-hosted', 'linux', 'x64']
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download tag artifact
        uses: actions/download-artifact@v3
        with:
          name: sha
          path: ./sha

      - name: Read tag
        id: read_tag
        run: |
          SHA=$(cat ./sha/sha.txt)
          echo "sha=${SHA}" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm install --verbose

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::629500205300:role/vb-hub-api-aws-rds-ci
          aws-region: us-east-1

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image
        id: build-docker-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: hubdash-ci
          IMAGE_TAG: ${{ env.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$IMAGE" >> $GITHUB_ENV
          echo "::set-output name=IMAGE::$IMAGE"

      - name: Deploy to App Runner Service
        uses: awslabs/amazon-app-runner-deploy@main
        with:
          service: vb-hub-api
          image: ${{ steps.build-docker-image.outputs.IMAGE }}
          access-role-arn: arn:aws:iam::629500205300:role/hubdash-app-runner-role
          region: us-east-1
          cpu: 2
          memory: 4G
          port: 3333
          environment-secrets: |
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            DATABASE_URL=${{ secrets.RDS_DATABASE_URL }}
            JWT_PRIVATE_KEY=${{ secrets.JWT_PRIVATE_KEY }}
            JWT_PUBLIC_KEY=${{ secrets.JWT_PUBLIC_KEY }}
            CLOUDFLARE_DEV_URL=${{ secrets.CLOUDFLARE_DEV_URL }}
            CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
            TOKEN_VALUE=${{ secrets.TOKEN_VALUE }}
            CLOUDFLARE_BUCKET_NAME=${{ secrets.CLOUDFLARE_BUCKET_NAME }}
            CLOUDFLARE_ACCESS_KEY_ID=${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
            CLOUDFLARE_SECRET_ACCESS_KEY=${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_SECURE=${{ secrets.SMTP_SECURE }}
            SMTP_USER=${{ secrets.SMTP_USER }}
            SMTP_PASS=${{ secrets.SMTP_PASS }}

      - name: Remove test files from production build
        run: |
          find . -type f -name "*.e2e-spec.ts" -delete
          find . -type f -name "*.test.ts" -delete

      - name: Build Nest.js app
        run: npm run build

      - name: Run Prisma migrations on AWS RDS
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.RDS_DATABASE_URL }}

      - name: Update Lambda Handler
        run: aws lambda update-function-configuration --function-name=lambda-gh-action --handler dist/src/infra/lambda.handler

      - name: Reinstall production dependencies
        run: |
          rm -rf node_modules
          npm install --only=production

      - name: Create Lambda Layer ZIP
        run: |
          mkdir -p layer/nodejs
          cp -r node_modules layer/nodejs/
          cd layer
          zip -r layer.zip nodejs

      - name: Check Layer ZIP and Node.js folder size
        run: |
          ls -lh layer/layer.zip
          ls -lh layer/nodejs

      - name: Upload Layer ZIP to S3
        run: aws s3 cp layer/layer.zip s3://lambda-layer-hub-api/layer.zip

      - name: Upload Lambda Layer and Update Function Configuration with Retry Logic
        run: |
          publish_output=$(aws lambda publish-layer-version \
            --layer-name nodejs-dependencies \
            --description "Nova versão com dependências atualizadas" \
            --content S3Bucket=lambda-layer-hub-api,S3Key=layer.zip \
            --compatible-runtimes nodejs18.x \
            --query 'LayerVersionArn' --output text)
          echo "Nova versão da layer publicada: $publish_output"

          max_retries=5
          retry_wait=10
          for attempt in $(seq 1 $max_retries); do
            echo "Attempt $attempt of $max_retries to update function configuration"
            if aws lambda update-function-configuration --function-name lambda-gh-action --layers $publish_output; then
              echo "Layer update succeeded"
              break
            else
              echo "Layer update failed, retrying in $retry_wait seconds..."
              sleep $retry_wait
              retry_wait=$((retry_wait * 2))
            fi
          done

      - name: Prepare deployment package
        run: |
          cp package.json dist/
          cp package-lock.json dist/
          zip -r deploy.zip ./dist

      - name: Deploy to Lambda
        run: |
          max_retries=5
          retry_wait=15
          for attempt in $(seq 1 $max_retries); do
            echo "Attempt $attempt of $max_retries"
            if aws lambda update-function-code --function-name lambda-gh-action --zip-file fileb://deploy.zip;
              then
              echo "Code deployment succeeded"
              break
            else
              echo "Code deployment failed, retrying in $retry_wait seconds..."
              sleep $retry_wait
              retry_wait=$((retry_wait * 2))
            fi
          done

      - name: Update Lambda Environment Variables
        run: |
          max_retries=5
          retry_wait=10
          for attempt in $(seq 1 $max_retries); do
            echo "Attempt $attempt of $max_retries"
            if aws lambda update-function-configuration --function-name lambda-gh-action \
              --environment "Variables={DOMAIN_NAME=${{ secrets.DOMAIN_NAME }},ENV_STAGE=${{ secrets.ENV_STAGE }},DATABASE_URL=${{ secrets.RDS_DATABASE_URL }},JWT_PRIVATE_KEY=${{ secrets.JWT_PRIVATE_KEY }},JWT_PUBLIC_KEY=${{ secrets.JWT_PUBLIC_KEY }},CLOUDFLARE_DEV_URL=${{ secrets.CLOUDFLARE_DEV_URL }},CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }},TOKEN_VALUE=${{ secrets.TOKEN_VALUE }},CLOUDFLARE_BUCKET_NAME=${{ secrets.CLOUDFLARE_BUCKET_NAME }},CLOUDFLARE_ACCESS_KEY_ID=${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }},CLOUDFLARE_SECRET_ACCESS_KEY=${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }},SMTP_HOST=${{ secrets.SMTP_HOST }},SMTP_PORT=${{ secrets.SMTP_PORT }},SMTP_SECURE=${{ secrets.SMTP_SECURE }},SMTP_USER=${{ secrets.SMTP_USER }},SMTP_PASS=${{ secrets.SMTP_PASS }}}"; 
              then
              echo "Environment variable update succeeded"
              break
            else
              echo "Environment variable update failed, retrying in $retry_wait seconds..."
              sleep $retry_wait
              retry_wait=$((retry_wait * 2))
            fi
          done