name: CI

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    name: 'Build and Deploy'
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
      JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}
      CLOUDFLARE_DEV_URL: ${{ secrets.CLOUDFLARE_DEV_URL }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      TOKEN_VALUE: ${{ secrets.TOKEN_VALUE }}
      CLOUDFLARE_BUCKET_NAME: ${{ secrets.CLOUDFLARE_BUCKET_NAME }}
      CLOUDFLARE_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
      CLOUDFLARE_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Unit tests
        run: npm run test

      - name: Build Nest.js app
        run: npm run build

      - name: Reinstall production dependencies
        run: |
          rm -rf node_modules
          npm install --only=production
          npm prune

      - name: Create Lambda Layer ZIP
        run: |
          mkdir -p layer/nodejs
          cp -r node_modules layer/nodejs/
          cd layer
          zip -r layer.zip nodejs

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::629500205300:role/vb-hub-api-aws-rds-ci
          aws-region: us-east-1

      - name: Upload Lambda Layer
        id: upload_lambda_layer
        run: |
          LAYER_VERSION=$(aws lambda publish-layer-version --layer-name nodejs-dependencies \
                        --zip-file fileb://layer/layer.zip --compatible-runtimes nodejs18.x \
                        --query Version --output text)
          echo "LAYER_VERSION=$LAYER_VERSION" >> $GITHUB_ENV

      - name: Zip dist folder and Deploy to Lambda
        run: zip -r deploy.zip ./dist package.json

      - name: Show the size of the ZIP file
        run: ls -lh deploy.zip

      - name: Deploy to Lambda
        run: aws lambda update-function-code --function-name=lambda-gh-action --zip-file=fileb://deploy.zip

      - name: Update Lambda Configuration to Use Layer
        run: |
          aws lambda update-function-configuration --function-name lambda-gh-action \
            --layers arn:aws:lambda:us-east-1:629500205300:layer:nodejs-dependencies:${{ env.LAYER_VERSION }}

      - name: Update Lambda Environment Variables
        run: |
          max_retries=5
          retry_wait=10
          for attempt in $(seq 1 $max_retries); do
            echo "Attempt $attempt of $max_retries"
            if aws lambda update-function-configuration --function-name lambda-gh-action \
              --environment "Variables={DATABASE_URL=${{ secrets.DATABASE_URL }},JWT_SECRET=${{ secrets.JWT_SECRET }},ANOTHER_SECRET=${{ secrets.ANOTHER_SECRET }}}"; then
              echo "Update succeeded"
              break
            else
              echo "Update failed, retrying in $retry_wait seconds..."
              sleep $retry_wait
              retry_wait=$((retry_wait * 2))
            fi
          done