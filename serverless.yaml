service: nestjs-lambda

useDotenv: true

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  environment:
    DATABASE_URL: ${env:DATABASE_URL}
    JWT_PRIVATE_KEY: ${env:JWT_PRIVATE_KEY}
    JWT_PUBLIC_KEY: ${env:JWT_PUBLIC_KEY}
    CLOUDFLARE_DEV_URL: ${env:CLOUDFLARE_DEV_URL}
    CLOUDFLARE_ACCOUNT_ID: ${env:CLOUDFLARE_ACCOUNT_ID}
    TOKEN_VALUE: ${env:TOKEN_VALUE}
    CLOUDFLARE_BUCKET_NAME: ${env:CLOUDFLARE_BUCKET_NAME}
    CLOUDFLARE_ACCESS_KEY_ID: ${env:CLOUDFLARE_ACCESS_KEY_ID}
    CLOUDFLARE_SECRET_ACCESS_KEY: ${env:CLOUDFLARE_SECRET_ACCESS_KEY}

functions:
  main:
    handler: dist/src/infra/lambda.handler
    layers:
      - arn:aws:lambda:us-east-1:629500205300:layer:nodejs-dependencies:1
    events:
      - http:
          method: ANY
          path: /
          cors:
            origins:
              - http://172.20.10.2:5173
              - http://localhost:5173
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
              - X-HTTP-Method-Override
              - Accept
              - Origin
              - Access-Control-Request-Headers
              - Access-Control-Request-Method
            allowCredentials: true
      - http:
          method: ANY
          path: '{proxy+}'
          cors:
            origins:
              - http://172.20.10.2:5173
              - http://localhost:5173
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
              - X-HTTP-Method-Override
              - Accept
              - Origin
              - Access-Control-Request-Headers
              - Access-Control-Request-Method
            allowCredentials: true